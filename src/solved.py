import csv
import math

import util


def problem1():
    """Problem 1 Euler.

    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below .
    """
    return sum([ea for ea in range(1000) if (ea % 3 == 0 or ea % 5 == 0)])


def problem2():
    """Problem 2 Euler.

    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1,2,3,5,8,13,21,34,55,89...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    li = util.generate_fibonacci(4000000)
    return sum([ea for ea in li if ea % 2 == 0])


def problem3(num=600851475143):
    """Problem 3 Euler.

    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    """
    return max(util.prime_factors(num))


def problem4():
    """Problem 4 Euler.

    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 times 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    return max(
        [ea_1 * ea_2 for ea_1 in range(999, 100, -1) for ea_2 in range(999, 100, -1) if util.is_palindrome(ea_1 * ea_2)]
    )


def problem5():
    """Euler Problem 5.

    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    """
    i = 2520  # Gave a starting point
    vals = list(range(1, 21))
    while True:
        i += 2520  # Gunna have to also be divisible by this
        if util.divisible_by_all(i, vals):
            return i


def problem6():
    """Euler Problem 6.

    The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    """

    def sum_of_squares(li):
        val = 0
        for ea in li:
            val += ea * ea
        return val

    a = sum(range(1, 101)) ** 2
    b = sum_of_squares(range(1, 101))
    return a - b


def problem7(num=10001):
    """Euler Problem 7.

    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10,001st prime number?
    """
    i = 2
    li = []

    while True:
        if util.is_prime(i):
            li.append(i)
            if len(li) == num:
                return li[-1]
        i += 1


def problem7_alt(num=10001):
    """Euler Problem 7.

    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10,001st prime number?
    """

    def get_nth_prime(nth_prime):
        prime_list = [2]
        num = 3
        while len(prime_list) < nth_prime:
            # The only numbers you care about are primes, since a prime is not divisible by any other primes.
            if not util.divisible_by_any(num, prime_list):
                prime_list.append(num)
            num += 2
        return prime_list[-1]

    return get_nth_prime(num)


def problem8(
    num=7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450,
    consecutive=13,
):
    """Euler Problem 8.

    The four adjacent digits in the 1000-digit number that have the greatest product are 9 times 9 times 8 times 9 = 5832.
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """
    li = [int(x) for x in str(num)]
    highest = 0
    for i in range(1, len(li) - consecutive):
        highest = max(util.multiply_list(li[i : i + consecutive]), highest)
    return highest


def problem9(desired_sum):
    """Euler Problem 9.

    A Pythagorean triplet is a set of three natural numbers, a<b<c, for which a^2 + b^2 = c^2
    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product a*b*c
    """
    a, b, c = 1, 2, 3
    for a in range(1, desired_sum // 3):
        for b in range(a, desired_sum // 2):
            for c in range(max(b, desired_sum // 3), desired_sum - b - a + 1):
                if a**2 + b**2 == c**2 and a + b + c == desired_sum:
                    return a * b * c
    return None


def problem10():
    """Euler Problem 10.

    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    """

    def prime_list(n):
        prime = [True] * n
        for i in range(3, int(n**0.5) + 1, 2):
            if prime[i]:
                prime[i * i :: 2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)
        return [2] + [i for i in range(3, n, 2) if prime[i]]

    return sum(prime_list(2000000))


def problem11():
    def get_rows(grid, adj):
        li = []
        for row_num in range(len(grid)):
            for col_num in range(len(grid[row_num]) - adj + 1):
                temp = [grid[row_num][col_num + offset] for offset in [0, 1, 2, 3]]
                li.append(temp)
        return li

    def get_cols(grid, adj):
        li = []
        for row_num in range(len(grid) - adj + 1):
            for col_num in range(len(grid[row_num])):
                temp = [grid[row_num + offset][col_num] for offset in [0, 1, 2, 3]]
                li.append(temp)
        return li

    def get_diags(grid, adj):
        li = []
        for row_num in range(len(grid) - adj + 1):
            for col_num in range(len(grid[row_num]) - adj + 1):
                temp = [grid[row_num + offset][col_num + offset] for offset in [0, 1, 2, 3]]
                li.append(temp)
            for col_num in range(adj - 1, len(grid[row_num])):
                temp = [grid[row_num + offset][col_num - offset] for offset in [0, 1, 2, 3]]
                li.append(temp)
        return li

    grid = util.import_2d_array_data("data/SumGrid.csv")
    adj = 4
    li = get_rows(grid, adj)
    li += get_cols(grid, adj)
    li += get_diags(grid, adj)

    max_value = 0
    for line in li:
        max_value = max(max_value, util.multiply_list(line))
    return max_value


def problem12(desired_divisors=500):
    """Euler Problem 12.

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
    Let us list the factors of the first seven triangle numbers:
    1 : 1
    3 : 1,3
    6 : 1,2,3,6
    10 : 1,2,5,10
    15 : 1,3,5,15
    21 : 1,3,7,21
    28 : 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    """
    num = 28
    inc = 7
    while len(util.find_all_divisors(num)) < desired_divisors:
        inc += 1
        num += inc
    return num


def problem13(filename):
    """Euler Problem 13.

    Work out the first ten digits of the sum of the following one-hundred -digit numbers. [included as CSV file LargeSum.csv]
    """
    with open(filename) as csvdatafile:
        li = list(csv.reader(csvdatafile))
    for ea in range(len(li)):
        li[ea] = int(li[ea][0])
    return str(sum(li))[0:10]


def problem14(highest_num):
    """Euler Problem 14.

    The following iterative sequence is defined for the set of positive integers:
    n => n/2 (n is even)
    n => 3n+1 (n is odd)

    Using the rule above and starting with 13, we generate the following sequence:
    13, 40, 20, 10, 5, 16, 8, 4, 2, 1.
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
    Which starting number, under one million, produces the longest chain?
    Once the chain starts the terms are allowed to go above one million.
    """

    def eval_collatz(num):
        curriter = 0
        while num != 1:
            curriter += 1
            num = num / 2 if num % 2 == 0 else 3 * num + 1
        return curriter

    max_collatz = 0
    value = 0
    for ea in range(1, highest_num):
        c = eval_collatz(ea)
        if max_collatz < c:
            max_collatz = c
            value = ea
    return value


def problem15(n):
    """Euler Problem 15.

    Starting in the top left corner of a 2x2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner
    How many such routes are there through a 20x20 grid?
    """

    def binomial_coefficient(n, k):
        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))

    return binomial_coefficient(2 * n, n)


def problem16(base, exponent):
    """Euler Problem 16.

    2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    What is the sum of the digits of the number 2^1000?
    """
    val = base**exponent
    return sum(util.convert_int_to_list(val))


def problem17():
    """Euler Problem 17.

    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
    Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage
    """

    def num_len(n):
        def below_100(n, lasts, tens):
            if n < len(lasts):
                return lasts[n]
            return tens[max(n // 10, 0)] + lasts[n % 10]

        lasts = [
            0,
            len("one"),
            len("two"),
            len("three"),
            len("four"),
            len("five"),
            len("six"),
            len("seven"),
            len("eight"),
            len("nine"),
            len("ten"),
            len("eleven"),
            len("twelve"),
            len("thirteen"),
            len("fourteen"),
            len("fifteen"),
            len("sixteen"),
            len("seventeen"),
            len("eighteen"),
            len("nineteen"),
        ]
        tens = [
            0,
            0,
            len("twenty"),
            len("thirty"),
            len("forty"),
            len("fifty"),
            len("sixty"),
            len("seventy"),
            len("eighty"),
            len("ninety"),
        ]
        tot = 0
        h = int(n // 100) % 10
        t = int(n // 1000)
        s = n % 100

        one_hundred, nineninenine = 100, 999

        if n < one_hundred:
            return below_100(n, lasts, tens)

        if n > nineninenine:
            tot += below_100(t, lasts, tens) + len("thousand")
        if h != 0:
            tot += lasts[h] + len("hundred")
        if s != 0:
            tot += len("and") + below_100(s, lasts, tens)
        return tot

    running_tot = 0
    for n in range(1, 1001):
        running_tot += num_len(n)
    return running_tot


def problem18(filename="data/TriangleSum.csv"):
    """Euler Problem 18.

    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
    Find the maximum total from top to bottom of the triangle below: [data/TriangleSum.csv]
    note: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
    """
    grid = util.import_2d_array_data(filename)

    # Solution is based on rolling up from bottom.
    # Each row will be the sum of the maximum path downwards.
    # Each item touches 2 below it-> same col and 1 to the right.

    for row_num in range(len(grid) - 2, -1, -1):  # -2 because -1 would be last, need to start 1 higher
        for col_num in range(len(grid[row_num])):
            grid[row_num][col_num] += max(grid[row_num + 1][col_num], grid[row_num + 1][col_num + 1])
    return grid[0][0]


def problem67(filename="data/0067_triangle.csv"):
    """Euler Problem 67.

    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
    Find the maximum total from top to bottom in [data/0067_triangle.csv], a file containing a triangle with one-hundred rows.
    Note: This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 2^99 altogether!
    If you could check one trillion (10^12) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it.
    """
    return problem18(filename)


def problem19():
    """Euler Problem 19.

    You are given the following information, but you may prefer to do some research for yourself:
        1 Jan 1900 was a Monday.
        Thirty days has September,
        April, June and November.
        All the rest have thirty-one,
        Saving February alone,
        Which has twenty-eight, rain or shine.
        And on leap years, twenty-nine.
        A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    """

    def is_leap_year(year):
        return bool(year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))

    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # how many days in each month
    a = 2  # 1901 starts on a Tuesday
    sun = 0  # Number of sundays
    february = 28
    for year in range(1901, 2001, 1):
        for ea in month_days:
            if a % 7 == 0:
                sun += 1
            m_d = 29 if ea == february and is_leap_year(year) else ea
            a += m_d
    return sun


def problem20():
    """Euler Problem 20.

    n! means nx(n-1)x...3x2x1
    For example 10! = 10*9*8*7*6*5*4*3*2*1 - 3628800
    and the sum of the digits in the number 10! is 3+6+2+8+8+0+0 = 27
    Find the sum of the digits in the number 100!
    """

    def factorial(n):
        tot = 1
        for i in range(1, n, 1):
            tot *= i
        return tot

    return sum(util.convert_int_to_list(factorial(100)))


def problem21(max_val=10000):
    """Euler Problem 21.

    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a!=b, then a and b are an amicable pair and each of a and b are called amicable numbers.
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220
    Evaluate the sum of all the amicable numbers under 10000.
    """
    amicable_set = set()
    for ea in range(max_val):
        if ea not in amicable_set:
            number_1 = ea
            number_2 = sum(util.find_all_divisors(ea))
            if sum(util.find_all_divisors(number_2)) == number_1 and number_1 != number_2:
                amicable_set.add(number_1)
                amicable_set.add(number_2)
    return sum(list(amicable_set))


def problem22():
    """Euler Problem 22.

    Using [data/0022_names.csv], a file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
    For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
    So, COLIN would obtain a score of 938*53 = 49714.
    What is the total of all the name scores in the file?
    """

    def letter_scoring():
        letter_scores = {}
        letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        for ea in range(len(letters)):
            letter_scores[letters[ea]] = ea + 1
        return letter_scores

    # Generate a dict of scores
    score_lookup = letter_scoring()
    names = util.import_data("data/0022_names.csv")[0]
    names.sort()
    total = 0

    # For each name, find the letter total. Then multiply letter by name number on the list
    for name_num in range(len(names)):
        letter_score = 0
        for letter in names[name_num]:
            letter_score += score_lookup.get(letter, 0)
        total += letter_score * (name_num + 1)
    return total


def problem23():
    """Euler Problem 23.

    A perfect number is a number for which the sum of its proper divisors is exactly equal to the number.
    For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
    A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24.
    By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers.
    However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
    Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
    """

    def abundant_numbers(max_num=28123):
        return {ea for ea in range(max_num) if sum(util.find_all_divisors(ea)) > ea}

    def check_represented(n, abu):
        return any(n - ea in abu for ea in abu)

    tot = 0
    abundant_numbers_li = abundant_numbers(28123)
    for ea in range(1, 28123):
        if check_represented(ea, abundant_numbers_li):
            tot += ea
    return tot


def problem24(digits=None, idx=999999):
    """Euler Problem 24.

    A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order.
    The lexicographic permutations of 0, 1 and 2 are:
    012   021   102   120   201   210
    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
    """
    from itertools import permutations

    if digits is None:
        digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    perms = list(permutations(digits))
    perms.sort()
    return perms[idx]
